// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _4erp.infrastructure.data.context;

#nullable disable

namespace _4erp.infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250330031927_CreateInitialTables")]
    partial class CreateInitialTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("4erp_person_skill", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("4erp_person_skill");
                });

            modelBuilder.Entity("4erp_vacancy_skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("4erp_vacancy_skill");
                });

            modelBuilder.Entity("_4erp.api.entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("4erp_role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c"),
                            Alias = "administrator:system:*",
                            Description = "Administrador do sistema",
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b"),
                            Alias = "administrator:company:system:*",
                            Description = "Administrador do sistema",
                            Name = "Company"
                        },
                        new
                        {
                            Id = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16"),
                            Alias = "administrator:person:system:*",
                            Description = "Usuario do sistema",
                            Name = "Person"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("4erp_scope");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2025e44f-a232-43a5-9b8c-769fbd18a06f"),
                            Alias = "administrator:vacancy:create",
                            Description = "Pode criar vagas no sistema",
                            Name = "Criador de vagas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("4852b3ab-dd40-47a6-9548-643ae0f6967e"),
                            Alias = "administrator:vacancy:read",
                            Description = "Pode ver vagas no sistema",
                            Name = "Leitor de vagas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("b2d5653f-4e4c-4ec1-94f9-bd458b72d27a"),
                            Alias = "administrator:vacancy:editor",
                            Description = "Pode editar vagas no sistema",
                            Name = "Editor de vagas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("72bdf067-cc4b-4e36-983b-cb1e7284af48"),
                            Alias = "administrator:vacancy:remove",
                            Description = "Pode remover vagas no sistema",
                            Name = "Removedor de vagas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("bdefc049-c893-4871-90e4-5a69298b5e05"),
                            Alias = "administrator:company:remove",
                            Description = "Pode remover empresas no sistema",
                            Name = "Pode remover empresas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("ef924721-b753-4997-b94f-74ea97e3a3d3"),
                            Alias = "administrator:company:create",
                            Description = "Pode criar uma nova empresa",
                            Name = "Pode criar uma nova empresa",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("8cb9c7e0-ba1a-452a-b0b3-49cc930a049c"),
                            Alias = "administrator:company:editor",
                            Description = "Pode editar uma nova empresa no sistema",
                            Name = "Pode editar uma nova empresa",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("cac88890-5651-4548-8bc8-71683a9dac7e"),
                            Alias = "administrator:company:read",
                            Description = "Pode ler empresas no sistema",
                            Name = "Pode ler empresas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("f48f60d8-ea44-4616-beb2-c031aca31a3d"),
                            Alias = "administrator:user:remove",
                            Description = "Pode remover uma nova empresa no sistema",
                            Name = "Pode remover empresas",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("4a5a2b1d-f0e2-493d-8231-e975a295006b"),
                            Alias = "administrator:user:create",
                            Description = "Pode criar uma nova empresa no sistema",
                            Name = "Pode criar uma nova empresa",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("b4eff319-159c-4cc9-bcb1-0b36c574900f"),
                            Alias = "administrator:user:editor",
                            Description = "Pode editar um novo usuários",
                            Name = "Pode editar um novo usuários",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("b2d9a2bf-62e1-4ce2-b5a5-2c9d6002d01c"),
                            Alias = "administrator:user:read",
                            Description = "Pode ler usuários no sistema",
                            Name = "Pode ler usuários",
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("6b7fc3b4-6c16-41ee-a6ab-0c7dfd21d41e"),
                            Alias = "administrator:company:vacancy:create",
                            Description = "Pode criar vagas no sistema",
                            Name = "Criador de vagas",
                            RoleId = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b")
                        },
                        new
                        {
                            Id = new Guid("c5878d7a-c03a-4a88-a952-68d7e1d07b0a"),
                            Alias = "administrator:company:vacancy:read",
                            Description = "Pode ver vagas no sistema",
                            Name = "Leitor de vagas",
                            RoleId = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b")
                        },
                        new
                        {
                            Id = new Guid("a490ea3e-ce26-4d2d-b2a2-77a28cc824cb"),
                            Alias = "administrator:company:vacancy:editor",
                            Description = "Pode editar vagas no sistema",
                            Name = "Editor de vagas",
                            RoleId = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b")
                        },
                        new
                        {
                            Id = new Guid("e9c764a4-5139-43a1-8d20-a613fe5bf9d3"),
                            Alias = "administrator:company:vacancy:remove",
                            Description = "Pode remover vagas no sistema",
                            Name = "Removedor de vagas",
                            RoleId = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b")
                        },
                        new
                        {
                            Id = new Guid("44a3dc2f-1810-4957-8bd3-0e526ee8d44f"),
                            Alias = "administrator:person:vacancy:view",
                            Description = "Pode criar vagas no sistema",
                            Name = "Pode ver vagas disponíveis",
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        },
                        new
                        {
                            Id = new Guid("b74b8e82-0ba6-4c36-a34d-7076862c8882"),
                            Alias = "administrator:person:candidate:read",
                            Description = "Pode ver vagas no sistema",
                            Name = "Pode ver candidaturas feitas a vagas",
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        },
                        new
                        {
                            Id = new Guid("9d631e92-5e18-40c5-bb62-a76ef782a77e"),
                            Alias = "administrator:person:candidate:create",
                            Description = "Pode editar vagas no sistema",
                            Name = "Pode se candidatar a uma vaga",
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        },
                        new
                        {
                            Id = new Guid("f7bf4f05-4268-428a-b225-1a67e2bf06af"),
                            Alias = "administrator:person:candidate:remove",
                            Description = "Pode remover vagas no sistema",
                            Name = "Pode remover sua candidatura de uma vaga",
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("4erp_user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36374eca-40aa-4a2f-9310-4ba40580bc21"),
                            Email = "administrator@4erp.io",
                            Password = "$2a$11$z60nhm6q5Vonv5b6/97DAuI8G.TcxwDgyAgd21d.AiTHgIjWxJgRu",
                            PersonId = new Guid("ebab34b5-3543-4c53-a3cc-03bf86567081"),
                            RoleId = new Guid("ec9f1294-3ac6-4496-9ace-13a10056633c")
                        },
                        new
                        {
                            Id = new Guid("e2920e37-1fb6-4f23-960e-2ce8a1017c09"),
                            Email = "infinity@4erp.io",
                            Password = "$2a$11$z60nhm6q5Vonv5b6/97DAuI8G.TcxwDgyAgd21d.AiTHgIjWxJgRu",
                            PersonId = new Guid("b3ff401f-0c41-47de-a3c8-0d2c5b65e787"),
                            RoleId = new Guid("6f8a65c6-fc8f-439f-bb92-28c2253c000b")
                        },
                        new
                        {
                            Id = new Guid("48a29331-9c60-42a9-ad70-e69fc6bc83c2"),
                            Email = "gabriel@4erp.io",
                            Password = "$2a$11$z60nhm6q5Vonv5b6/97DAuI8G.TcxwDgyAgd21d.AiTHgIjWxJgRu",
                            PersonId = new Guid("438d2927-d1d6-442d-97b7-d4d41a67fc35"),
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        },
                        new
                        {
                            Id = new Guid("812fefd5-98c7-4257-a609-3eeeb0ac549d"),
                            Email = "alice@4erp.io",
                            Password = "$2a$11$z60nhm6q5Vonv5b6/97DAuI8G.TcxwDgyAgd21d.AiTHgIjWxJgRu",
                            PersonId = new Guid("05c80ccd-8c9a-4aa2-9dd5-b80e2e30030f"),
                            RoleId = new Guid("786bc7e7-8365-4d08-90fb-7fc26d284d16")
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.candidature.Candidature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VacancyId");

                    b.ToTable("4erp_candidature");
                });

            modelBuilder.Entity("_4erp.api.entities.ocupation.Ocupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("4erp_ocupation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26af6758-9513-4f84-b9b2-d3a421d56996"),
                            Description = "Engenheiro de Software",
                            Name = "Engenheiro de Software"
                        },
                        new
                        {
                            Id = new Guid("05752402-43cf-42bf-aa56-a553d055ce01"),
                            Description = "Arquiteto de Software",
                            Name = "Arquiteto de Software"
                        },
                        new
                        {
                            Id = new Guid("bef71141-4859-46cb-9880-7a83d1532d14"),
                            Description = "Desenvolvedor de Software",
                            Name = "Desenvolvedor de Software"
                        },
                        new
                        {
                            Id = new Guid("f0173a5a-473f-4e86-915b-8bd63ed68903"),
                            Description = "Líder Técnico",
                            Name = "Líder Técnico"
                        },
                        new
                        {
                            Id = new Guid("bad88f10-d1e5-4807-9f2c-852e25276b38"),
                            Description = "QA",
                            Name = "QA"
                        },
                        new
                        {
                            Id = new Guid("3fdaa34f-67e4-4325-b9ba-d0ea9a351579"),
                            Description = "Analista de Sistemas",
                            Name = "Analista de Sistemas"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.person.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FantasyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BioId");

                    b.HasIndex("PhoneId");

                    b.ToTable("4erp_person");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebab34b5-3543-4c53-a3cc-03bf86567081"),
                            FantasyName = "4ERP",
                            FirstName = "",
                            LastName = "",
                            LegalName = "4ERP",
                            TaxId = "18120830000119",
                            Type = -1
                        },
                        new
                        {
                            Id = new Guid("b3ff401f-0c41-47de-a3c8-0d2c5b65e787"),
                            BioId = new Guid("91597911-94ee-42ef-b1c4-c0ce0e9fe883"),
                            FantasyName = "Infinity",
                            FirstName = "",
                            LastName = "",
                            LegalName = "Infinity",
                            PhoneId = new Guid("507accd1-020a-40fe-89c1-73d329133d2a"),
                            TaxId = "18120830000118",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("438d2927-d1d6-442d-97b7-d4d41a67fc35"),
                            BioId = new Guid("9b8717ca-9565-4c6d-951f-64e5e9df0ad5"),
                            FantasyName = "",
                            FirstName = "Gabriel",
                            LastName = "Borges Da Silva",
                            LegalName = "",
                            PhoneId = new Guid("5a44e663-ef90-4fbb-a61e-0633b1dae5f9"),
                            TaxId = "03931830179",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("05c80ccd-8c9a-4aa2-9dd5-b80e2e30030f"),
                            BioId = new Guid("7f9c8d7f-5264-45a7-894d-889a25e2d069"),
                            FantasyName = "",
                            FirstName = "Alice",
                            LastName = "Borges Azevedo Lima",
                            LegalName = "",
                            PhoneId = new Guid("c1808532-d4d3-4429-bb35-69b4c4f50c9d"),
                            TaxId = "03931830179",
                            Type = 1
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.skill.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("4erp_skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b867bb5-eb6b-41cc-87a6-5041927be496"),
                            Description = "Linguagem de programação orientada a objetos utilizada para desenvolvimento web, desktop e mobile.",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("49dae8b3-25b0-4264-a4f2-0df5932101bd"),
                            Description = "Linguagem versátil usada para desenvolvimento web, automação, ciência de dados e inteligência artificial.",
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("48aa83d8-bbdf-45c5-8909-0155d254e5f4"),
                            Description = "Linguagem de programação essencial para desenvolvimento web, utilizada no frontend e backend.",
                            Name = "Typescript"
                        },
                        new
                        {
                            Id = new Guid("718e2ce0-a235-432f-bd9f-9dbe272d5924"),
                            Description = "Linguagem popular para desenvolvimento corporativo, aplicações móveis (Android) e sistemas distribuídos.",
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("1374000b-ddc6-4668-8e0c-f75f302106a2"),
                            Description = "Linguagem moderna desenvolvida pelo Google, focada em performance e concorrência.",
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("3b0c221a-9de4-4624-9a7b-33c6705a644e"),
                            Description = "Linguagem segura e eficiente, utilizada para sistemas embarcados, segurança e alto desempenho.",
                            Name = "Rust"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.status.Bio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("4erp_bio");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91597911-94ee-42ef-b1c4-c0ce0e9fe883"),
                            About = "A Infinity é uma empresa dedicada à excelência na construção de softwares e na engenharia de soluções tecnológicas. Com uma abordagem inovadora e personalizada, a Infinity alia expertise técnica e visão estratégica para transformar desafios complexos em oportunidades de crescimento para seus clientes. Nossa missão é desenvolver sistemas que impulsionem a eficiência operacional e a competitividade, adotando metodologias ágeis e tecnologias de ponta para criar soluções robustas e escaláveis. Valorizamos a criatividade, o comprometimento e a busca constante pela melhoria contínua, pilares que nos permitem entregar projetos com alta qualidade e impacto no mercado. Na Infinity, acreditamos que a transformação digital é essencial para a evolução dos negócios, e por isso, investimos continuamente na capacitação de nossos profissionais e na atualização de nossas práticas. Nosso time multidisciplinar trabalha em sinergia, integrando conhecimento técnico e visão de negócio para oferecer soluções completas que atendem às demandas específicas de cada projeto. Através de uma gestão transparente e orientada por resultados, a Infinity consolida sua posição como referência no setor, sempre focada em promover a inovação e contribuir para o sucesso dos nossos parceiros e clientes. Com compromisso e dedicação, seguimos construindo o futuro da tecnologia, transformando ideias em soluções que impulsionam o progresso.",
                            Linkedin = "http://linkedin.com/infinity",
                            Resume = "A Infinity é uma empresa dedicada à excelência na construção de softwares e na engenharia de soluções tecnológicas. Com uma abordagem inovadora e personalizada, a Infinity alia expertise técnica e visão estratégica para transformar desafios complexos em oportunidades de crescimento para seus clientes. Nossa missão é desenvolver sistemas que impulsionem a eficiência operacional e a competitividade, adotando metodologias ágeis e tecnologias de ponta para criar soluções robustas e escaláveis. Valorizamos a criatividade, o comprometimento e a busca constante pela melhoria contínua, pilares que nos permitem entregar projetos com alta qualidade e impacto no mercado. Na Infinity, acreditamos que a transformação digital é essencial para a evolução dos negócios, e por isso, investimos continuamente na capacitação de nossos profissionais e na atualização de nossas práticas. Nosso time multidisciplinar trabalha em sinergia, integrando conhecimento técnico e visão de negócio para oferecer soluções completas que atendem às demandas específicas de cada projeto. Através de uma gestão transparente e orientada por resultados, a Infinity consolida sua posição como referência no setor, sempre focada em promover a inovação e contribuir para o sucesso dos nossos parceiros e clientes. Com compromisso e dedicação, seguimos construindo o futuro da tecnologia, transformando ideias em soluções que impulsionam o progresso.",
                            WebSite = "http://linkedin.com/infinity"
                        },
                        new
                        {
                            Id = new Guid("9b8717ca-9565-4c6d-951f-64e5e9df0ad5"),
                            About = "Olá, me Chamo Gabriel, tenho 33 anos, sou entusiasta em tecnologia, apaixonado por computação e também em escovar bit. Minha carreira na área de TI começou ainda novo, com 13 anos descobri o mundo da computação e como ela poderia transformar meu futuro, de forma incansável, inapelável, incansável busquei aprender diveras áreas como infraestrutura TI, Programação, Vários níveis da Arquitetura de Computadores e Software. Atualmente me dedico a alimentar comunidades Open desenvolvendo ativos de infraestrutura e desenvolvendo startups.",
                            Linkedin = "http://linkedin.com/gabriel-lima",
                            Resume = "Trabalhei em grandes empresas como, Invent Software, Trinus Bank, BlueTech, Accenture, Sensedia, Banco BV, Banco Ouribank, Burgerking, Starbucks",
                            WebSite = "http://linkedin.com/gabriel-lima"
                        },
                        new
                        {
                            Id = new Guid("7f9c8d7f-5264-45a7-894d-889a25e2d069"),
                            About = "Olá, me Chamo Alice, tenho 22 anos, sou entusiasta em tecnologia, apaixonado por computação e também em escovar bit. Minha carreira na área de TI começou ainda novo, com 13 anos descobri o mundo da computação e como ela poderia transformar meu futuro, de forma incansável, inapelável, incansável busquei aprender diveras áreas como infraestrutura TI, Programação, Vários níveis da Arquitetura de Computadores e Software. Atualmente me dedico a alimentar comunidades Open desenvolvendo ativos de infraestrutura e desenvolvendo startups.",
                            Linkedin = "http://linkedin.com/gabriel-lima",
                            Resume = "Trabalhei em grandes empresas como, Invent Software, Trinus Bank, BlueTech, Accenture, Sensedia, Banco BV, Banco Ouribank, Burgerking, Starbucks",
                            WebSite = "http://linkedin.com/gabriel-lima"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.status.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BioId");

                    b.ToTable("4erp_education");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BioId");

                    b.ToTable("4erp_experience");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eb08c7e-e56b-49ff-b074-8e863b083738"),
                            BioId = new Guid("9b8717ca-9565-4c6d-951f-64e5e9df0ad5"),
                            Current = false,
                            Description = "Atuei como desenvoledor por 2 anos, onde pude contribuir na construção de aplicações em SAPUI5.",
                            Name = "Invent Software"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.status.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DDD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DDI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("4erp_phone");

                    b.HasData(
                        new
                        {
                            Id = new Guid("507accd1-020a-40fe-89c1-73d329133d2a"),
                            DDD = "62",
                            DDI = "+55",
                            Number = "984887715"
                        },
                        new
                        {
                            Id = new Guid("5a44e663-ef90-4fbb-a61e-0633b1dae5f9"),
                            DDD = "62",
                            DDI = "+55",
                            Number = "984887715"
                        },
                        new
                        {
                            Id = new Guid("c1808532-d4d3-4429-bb35-69b4c4f50c9d"),
                            DDD = "62",
                            DDI = "+55",
                            Number = "984887715"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.status.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("4erp_status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5eda1e3c-1b97-480c-bee4-9ea0c61859c5"),
                            Description = "Aguardando análise",
                            Name = "waiting",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("29d6e75a-3808-482d-9316-493a73dc6fe0"),
                            Description = "Avaliando candidato",
                            Name = "candidate_evaluation",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("711df75d-cebf-46e9-8873-6a8ce6670b5b"),
                            Description = "Entrevista",
                            Name = "interview",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("0558afb1-4a6e-46fb-bd0d-2d14b756b348"),
                            Description = "Rejeitado",
                            Name = "rejected",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("735b983b-db8f-4ece-a96c-6007fb1de5b9"),
                            Description = "Aprovado",
                            Name = "approved",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("44147d27-ff38-413f-8187-cce3e5d603f4"),
                            Description = "Avaliação técnica",
                            Name = "candidate_evaluation",
                            Slug = "candidature_status"
                        },
                        new
                        {
                            Id = new Guid("bb0bc2c3-62c4-4159-a680-5a45226ab7b1"),
                            Description = "Em breve",
                            Name = "vacancy_waiting",
                            Slug = "vacancy_status"
                        },
                        new
                        {
                            Id = new Guid("b1cd5678-0f19-4b2f-87ff-f1a0d75421f2"),
                            Description = "Em andamento",
                            Name = "vacancy_in_progress",
                            Slug = "vacancy_status"
                        },
                        new
                        {
                            Id = new Guid("e795eaaf-e08c-430e-a652-242a8dcf886d"),
                            Description = "Finalizada",
                            Name = "vacancy_done",
                            Slug = "vacancy_status"
                        },
                        new
                        {
                            Id = new Guid("e04f8400-f060-4c04-8e75-eb540cc3baba"),
                            Description = "Cancelada",
                            Name = "vacancy_canceled",
                            Slug = "vacancy_status"
                        });
                });

            modelBuilder.Entity("_4erp.api.entities.vacancy.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OcupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OcupationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.ToTable("4erp_vacancy");
                });

            modelBuilder.Entity("4erp_person_skill", b =>
                {
                    b.HasOne("_4erp.api.entities.person.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_4erp.api.entities.skill.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("4erp_vacancy_skill", b =>
                {
                    b.HasOne("_4erp.api.entities.skill.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_4erp.api.entities.vacancy.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_4erp.api.entities.Scope", b =>
                {
                    b.HasOne("_4erp.api.entities.Role", "Role")
                        .WithMany("Scopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("_4erp.api.entities.User", b =>
                {
                    b.HasOne("_4erp.api.entities.person.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_4erp.api.entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("_4erp.api.entities.candidature.Candidature", b =>
                {
                    b.HasOne("_4erp.api.entities.person.Person", "Person")
                        .WithMany("Candidatures")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_4erp.api.entities.status.Status", "Status")
                        .WithMany("Candidatures")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("_4erp.api.entities.vacancy.Vacancy", "Vacancy")
                        .WithMany("Candidatures")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Status");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("_4erp.api.entities.person.Person", b =>
                {
                    b.HasOne("_4erp.api.entities.status.Bio", "Bio")
                        .WithMany("Persons")
                        .HasForeignKey("BioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("_4erp.api.entities.status.Phone", "Phone")
                        .WithMany("Persons")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bio");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Bio", b =>
                {
                    b.HasOne("_4erp.api.entities.status.Education", null)
                        .WithMany("Bios")
                        .HasForeignKey("EducationId");

                    b.HasOne("_4erp.api.entities.status.Experience", null)
                        .WithMany("Bios")
                        .HasForeignKey("ExperienceId");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Education", b =>
                {
                    b.HasOne("_4erp.api.entities.status.Bio", "Bio")
                        .WithMany("Educations")
                        .HasForeignKey("BioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bio");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Experience", b =>
                {
                    b.HasOne("_4erp.api.entities.status.Bio", "Bio")
                        .WithMany("Experiences")
                        .HasForeignKey("BioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bio");
                });

            modelBuilder.Entity("_4erp.api.entities.vacancy.Vacancy", b =>
                {
                    b.HasOne("_4erp.api.entities.ocupation.Ocupation", "Ocupation")
                        .WithMany("Vacancies")
                        .HasForeignKey("OcupationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("_4erp.api.entities.person.Person", "Person")
                        .WithMany("Vacancies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_4erp.api.entities.status.Status", "Status")
                        .WithMany("Vacancies")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ocupation");

                    b.Navigation("Person");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("_4erp.api.entities.Role", b =>
                {
                    b.Navigation("Scopes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("_4erp.api.entities.ocupation.Ocupation", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("_4erp.api.entities.person.Person", b =>
                {
                    b.Navigation("Candidatures");

                    b.Navigation("Users");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Bio", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Education", b =>
                {
                    b.Navigation("Bios");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Experience", b =>
                {
                    b.Navigation("Bios");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Phone", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("_4erp.api.entities.status.Status", b =>
                {
                    b.Navigation("Candidatures");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("_4erp.api.entities.vacancy.Vacancy", b =>
                {
                    b.Navigation("Candidatures");
                });
#pragma warning restore 612, 618
        }
    }
}
